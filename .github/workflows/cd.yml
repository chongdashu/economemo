name: CD - Deploy Backend

on:
  release:
    types: [published]
  repository_dispatch:
    types: [run-cd]
  workflow_call:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        type: string
    secrets:
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true
      AWS_SSH_PRIVATE_KEY:
        required: true
      AWS_HOST:
        required: true
      AWS_USER:
        required: true
      POSTGRES_USER:
        required: true
      POSTGRES_PASSWORD:
        required: true
      POSTGRES_DB:
        required: true
      POSTGRES_HOST:
        required: true
      POSTGRES_PORT:
        required: true
      SSL_KEYFILE:
        required: true
      SSL_CERTFILE:
        required: true
      PORT:
        required: true
      DOMAIN:
        required: true
      CHROME_EXTENSION_IDS:
        required: true

  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - production

jobs:
  deploy:
    name: Deploy to Environment
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || github.event.inputs.environment || (github.event_name == 'push' && 'dev') || (github.event_name == 'release' && 'production') }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Ensure that the full history is fetched, not just a single commit

      - name: Verify latest code is checked out
        run: |
          echo "The latest commit is:"
          git log -1
          echo "Contents of backend/app/articles/api.py:"
          cat backend/app/articles/api.py

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/economemo-backend:latest
          no-cache: true

      - name: Deploy to EC2 and Verify FastAPI Server
        env:
          PRIVATE_KEY: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          HOST: ${{ secrets.AWS_HOST }}
          USER: ${{ secrets.AWS_USER }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
          PORT: ${{ secrets.PORT }}
          SSL_KEYFILE: ${{ secrets.SSL_KEYFILE }}
          SSL_CERTFILE: ${{ secrets.SSL_CERTFILE }}
          CHROME_EXTENSION_IDS: ${{ secrets.CHROME_EXTENSION_IDS }}
          DOMAIN: ${{ secrets.DOMAIN }}

        run: |
          set -e  # Exit immediately if any command fails
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -i private_key -o StrictHostKeyChecking=no ${USER}@${HOST} '
            export DOCKERHUB_USERNAME='"$DOCKERHUB_USERNAME"'
            export DOCKERHUB_TOKEN='"$DOCKERHUB_TOKEN"'

            # Perform Docker login
            echo "$DOCKERHUB_TOKEN" | docker login --username "$DOCKERHUB_USERNAME" --password-stdin

            # Check available disk space in MB
            AVAILABLE_SPACE=$(df / | awk '"'"'NR==2 {print $4}'"'"')

            # If available space is less than 5GB (5000000KB)
            if [ $AVAILABLE_SPACE -lt 5000000 ]; then
              echo "Low disk space. Cleaning up old Docker images and containers..."
              docker system prune -af --volumes
            fi

            # Pull the new image
            docker pull $DOCKERHUB_USERNAME/economemo-backend:latest

            # Stop and remove the existing container if it exists
            docker stop economemo-backend || true
            docker rm economemo-backend || true

            # Run the new container
            docker run -d --name economemo-backend \
              -p ${{ secrets.PORT }}:${{ secrets.PORT }} \
              -v /etc/letsencrypt:/etc/letsencrypt:ro \
              -e POSTGRES_USER="${{ secrets.POSTGRES_USER }}" \
              -e POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}" \
              -e POSTGRES_DB="${{ secrets.POSTGRES_DB }}" \
              -e POSTGRES_HOST="${{ secrets.POSTGRES_HOST }}" \
              -e POSTGRES_PORT="${{ secrets.POSTGRES_PORT }}" \
              -e PORT="${{ secrets.PORT }}" \
              -e SSL_KEYFILE="${{ secrets.SSL_KEYFILE }}" \
              -e SSL_CERTFILE="${{ secrets.SSL_CERTFILE }}" \
              -e CHROME_EXTENSION_IDS="${{ secrets.CHROME_EXTENSION_IDS }}" \
              -e DOMAIN="${{ secrets.DOMAIN }}" \
              ${{ secrets.DOCKERHUB_USERNAME }}/economemo-backend:latest

            echo "Waiting for FastAPI server to start..."
            sleep 30

            if curl -sSf -k https://localhost:$PORT/health > /dev/null 2>&1; then
              echo "FastAPI server is up and running with HTTPS!"
            else
              echo "Failed to verify server status"
              docker logs economemo-backend
              exit 1
            fi
          '

          rm private_key

      - name: Verify External Accessibility
        run: |
          echo "Verifying external accessibility..."
          if curl -sSf https://${{ secrets.DOMAIN }}/health > /dev/null 2>&1; then
            echo "External HTTPS accessibility verified successfully!"
          else
            echo "Failed to verify external accessibility"
            exit 1
          fi
